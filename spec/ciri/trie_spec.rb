# frozen_string_literal: true

# Copyright (c) 2018 by Jiang Jinyang <jjyruby@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


require 'spec_helper'
require 'ciri/trie'
require 'ciri/rlp'
require 'ciri/utils'


# copy from https://github.com/ethereum/py-trie/blob/master/tests/test_proof.py
RSpec.describe Ciri::Trie do
  context 'proof' do

    let(:proof_key_exists) do
      raw = "0xf90cb8a04775d885f52f833a65f59e300bce864acce42e30c823da57b3bdd0292e9117e8a09bbfc3085ad0d43784e6e453346e64477caca30f5e37d56e76149e9884e7c297f90c73f90211a001b2cf2fa726ef7bec396325edeb9b29e96eb5d50e8ca941c13a2d7b3c322429a0a2ba62e54a88a18b9079a57957d7471316ecb3b68753396f6b56a30d6c43bf55a0d606929e0bd331307cbe569db472df30a551fbecb9498c967281ebef58375f6ca0a888ed40047fa6be2689268954092bacb8778aeb6e160ce16eb43fad14fd46ffa0c909d0aab03a50dceaed5825049abe1f160c66bc04502340fdd630adec4b8b08a078ffb29a6a4fbc1b6a52802449e695f6546f7782f901a856a9aa34a66088f910a0491c51638aed61f8d14401475429c9024fef8dcc5cf9e67d8a7ecc987ed5d6b6a05527a2a020e4b1b6c3cd34435f9c5db350a877ef8cdec2025e76cd12ed2589a5a028a678fabec39aaeaae9bc7623755cdf6f149a33bc8963c1fedf5b7b7c025003a0cf35078f33a91f1951bb118ab097be93b2d57ee2e03607c33708766780204244a0558e2f95260ac5f1d4c3b9a8345264aa80fe38f1cf2047cce3990107ce489a60a0571fb51cecf70b86150df9f994cd7ce6429fa86c8d5d44f7baee3ac05c11b808a0f569ee29c4d234fc8fbac076531d553ecc7ad1380aa22b0acfe2692aee18e8c1a09d6d53581eeef7601d0c4ffc46e4bd0c4532104836f0937cd57ae73deb624ad6a075089208a54e6c933803a3e24fe8feb1c4878cb8719e6289629698d7f232b9a2a0a656b53fccd2c82a4d45e7cff8adf8dbe7f8f644d53c1c9546130e06727ae56d80f90211a0b303a9c131876d51a1493244346a67fed0256bf20d5db00eeb2717ed78c9556aa04c2f0d24372da5df20789cbcc4991ec5d8b5afd1d1aee64cec6fc4e25255650da0be5370f5ef02cd83b20ba036fdcabbed5ff27df7eab38417edcc196d461328f3a0fb244959529f0470011d7d880bed278e259bc9ea4e5fabf9c99daca9b3091e71a0aa62eb14c2f67d25aa2b30b5c10f3c20c56d61b163ebddcac090e24c8be9fe2fa0916c9da284bfc105e2530ec960c05e7d5121c46d6c2decf45224f68ad3c6f16aa0f313dee04cdb96456051dfa113016235e46bdedebfb130afe6315adb5ad437f4a00981b0ea2aecd0c316eeed7edc986590f27e70bb535919cf6cc42901c2d9c931a02dda258ac56a412de5206c4970beb368980f8071edab894b4edda6cb3b98b038a013971266a331fa7df1fe19fa0be6899acbf5edf351984f3da3b0652fd99f7908a066ba25fbbf451d5db305e424a5d247ec63e5230f2c918b4e39618ad14c166ca5a02370158b5504882f4b7c3461fc0e2e5a6d5e7b15756b8de45ffeeeaeb939d18ea043209fb379f3642e8b091c469e4c08077908b9e1ff4d87fdd6fddb8f949e88c2a017581f2f8b82f5e402847dbe9b7a60209427225f9cff06093e8ad76f4bf9f577a036518d62d85c845f52696e181f17897f40d6bb253eaf61278041a7d87d640722a0cc676df705c8e447f4b318c75c2e0ba2355ddc8077dac93bde9b03a04c53ce8c80f90211a0e4d315e0aa0ff9d0a6c2c8425faf22308cea3b91e44504ec9031795ad63ead63a0774dce164a533ae93698127ca0c97e47bbc77538c8939b05927968aada944e4ba089c7a2bde1da06247cde03d952539084e7050c63df79b0fb400635db38a9ef1fa040113ee8b819b7c740926d24932008c515bd97b03bf505713bb5c639d345c40ea0d55f6f6c056f8ef056d2a06ee7437852c992485451686b63104badfd55e9978fa0767fc54b42da5953a1bf20dae29984ef2c92ddc9b89e6ffc762895ff9474bc35a0cb51963221241fdcdbfeef27c8c84feca2aed35088bfbd21ea0eb089e9ddf377a048b81bc326867c216f00332fc74bc92b2c4be179f286a92a480557cdf88bb50aa006c5a183e4b4dcbfc08c3451931457afbbe96682a28da36ddaedc057885541d9a09c7a567f24a8b9f3c1573019acc5aa70033f2ae6d6ee3c0baf72f66a69d987eda0c71dca95ab7ed37ca69fba9ed54b78499559ad78b8daa721ba93bb422c976ee4a0d72213ca3da97c65118f25b25e1ba6ff935a8b28caab12ed8b330fe0a755a9e1a0c2b498b708182369378185fdc3c66b128699a5350c38d3bc9dc8e0d3cd3dc678a0adf0ea26f48f3d35e1b562c17dbaa10a20a4b74a321fd7c91da4c2afb74fb212a0d57e94997e56792c34ed4d4a1ada33e79091d4af77babf89600e99739345df25a082d24f16ca7b1587ef2d8aeab9cdfc828499dc6fc11e67f32d07f8a3edff788580f90211a0c5a5d3387a75fce9e26a97f0815424ee35944143b1850cef10cb605afc5427cba05a55e43f6c6a05f8bca7f1e4db084d06adbfb373faca53b97b55d26e98312b7ca06c0c4cfb5c2867b437c23ccb14f3a96c0123db227cdcfda023a289cf7897b48ea00be7241da21c5ca52974d682eced025dddef7aa343601bda8109b314df35bbcba0e7256232d4c69890d83a42a49e0ac6a101ac94bd72cadd8aa8e8c646ed04e914a0a7acc053cb6f98eb4a29b18b7bda2c98f24dca2ccdc42594e4dc3cf56f7d901da05bd97d46e20a84bca0810fb90b5d0c10259d0d00525a6762562a3262d17ab5d3a0acca67dbc3799182dd75ad85256782a00df4995e3d1468eeac812f6fe6e4ec0ca038ebed807d32d92e0eeb92a7aeeb8d9b3e383c9dc405f2573b46ce210915b2e3a02aedbf4a809f37d1cdef74892e65024d0d85442d9b4c8dac2a3368f39fdee046a064f9dffbfa60973a11c489755fe926d04c583b7212865c2c7d7f3abcf99ad2e9a09480d4b8e4a6d49c53ccc72a786f5d32797ed61861fbaf501987e73ab17296dca01cda72c1181f0bf3e2f0f13c0588a4014a2cc2a1bd604c8b95a6bd7a653426c1a03e30015364463d8ca71d341e6c4f74cd3b2c7cf06ce94f83f3c0726db682aa08a0d0ef12c53c5c008224988db6a76cd677a3003c4415f7d6c9d0fbd39fed2c9ef7a0a62d3eb1806a7ac38a2c35b8f8bfb45e8830823441fabf0e1f9b202f02ad687880f90211a0c117a17b1335273ece8ae83b84568cfe72da5a53c776d718fbe3bfff92874044a006b963ad8d32c05755af2277e53e1afd02f1dd9124682f0229c6d3bc17c432e8a0c4a2b32a6ba8c8123486a09badfab924353fc60c5d984b62d133db3a85ede15ba025a43e614d08be741bc8b5f2632e396f210347995f0aef934f415eab4391ce97a0c954c1f6c8bed86886fe7982457667e17a509c74982801f5fcf8bef61dc0158ea0d3f1e654d722bade697043e5e1040e3f6f84cb1a4518d0a3360e43c7443e1220a0e0060cafece36f702a6acd84ef9b82617b2c1c98ba2d10f97f2bb68a2f712ceba08a27eb1ae8699153f33ba85b662db032013face44473d845a0878aec5d9b3f9ea0cf0c4dbd92bb61539dd03a7ffed508ace4b5816761c23e5c899508d643f9e6b7a09b68d3b078f0fa35a67656965f169d78954232a9ce6dc8b9afb9ff0aaec71413a0480382d6bd005a0da0335951a4facd6cea38677b4c1618cadbb7357eff1b5d26a0413f6c31bf04c351739b0863c37cf54436a282f8d3f440aba06f4478c4ff592aa00cd7558830a0d3addddadb01ac9979613aebab384b25afc4f147d32ab7ae012aa0b873ab0ef490dbce0b296cb37ff170c6260e68fbc8d78860cddc972d6cb64c82a078f21585e901d8dcc5bcb7dacd24f0aec901cd485ab8299711ffcc37a598b4b6a0f3b6dde9b1930841daa339fe248d4f0a24204d6e222d27a5244635aecd3ea20c80f90151a0828b9d850b2f83ac6d62078968a586528ef4d95f0009ebb33e5c4011ec4f707f8080a022eed9893cc35fcae9edc2760d2c9e101c07e845bd109a165f3a686bb94f6df28080a0115d69b37436ab4b46c0a9817a26df02ca52518292acf1f97e9494744d39be1aa0d06459bcbee5a893c865bd15f8b6629a2bbe68eb9d851f28eed5b220f2eaa1f280a060a8cd303a49ddd7a1c9570d00a61b0c4dbb38b05a8be287160f9955f7dfc45580a0bc5217781259f172b963f51723cddbd51c30d2da7e996196d56bef940fd024cba02116ae65b5483758d50941b57b988f120b58854b183404cf8017f83156bced9ca00008435eb5cf62b313f095538e7951e8df9b49fea29c91405f169d82772c7586a03626995aaee672abecb358875c02993efaeb503ad5d274e270c7e2e00e95f944a0cf7f999a1c18a69a76e6a2d5b3458a4a18a78cc007dae90b690d090f9b06f85380f851a0078343d158dfdd4ad4f27f332b0a95b289d2229dc553fbfc9e648dd2d2e5994280808080a02d6d3200ef95cdfef89e0bbfaed8b4d2a12afd65aab18add1d0703c72c3ce8e78080808080808080808080f8669d385ad0d43784e6e453346e64477caca30f5e37d56e76149e9884e7c297b846f8440180a055bd1d6151977b62672c21c2754bbeeb3b8278b2e0c38edcd949846ee3628bf1a01e0b2ad970b365a217c40bcf3582cbb4fcc1642d7a5dd7a82ae1e278e010123e"
      state_root, key, proof = Ciri::RLP.decode(Ciri::Utils.dehex raw)
      [state_root, key, proof]
    end

    let(:proof_key_does_not_exists) do
      raw = "0xf90c86a04775d885f52f833a65f59e300bce864acce42e30c823da57b3bdd0292e9117e8a041b1a0649752af1b28b3dc29a1556eee781e4a4c3a1f7f53f90fa834de098c4df90c41f90211a001b2cf2fa726ef7bec396325edeb9b29e96eb5d50e8ca941c13a2d7b3c322429a0a2ba62e54a88a18b9079a57957d7471316ecb3b68753396f6b56a30d6c43bf55a0d606929e0bd331307cbe569db472df30a551fbecb9498c967281ebef58375f6ca0a888ed40047fa6be2689268954092bacb8778aeb6e160ce16eb43fad14fd46ffa0c909d0aab03a50dceaed5825049abe1f160c66bc04502340fdd630adec4b8b08a078ffb29a6a4fbc1b6a52802449e695f6546f7782f901a856a9aa34a66088f910a0491c51638aed61f8d14401475429c9024fef8dcc5cf9e67d8a7ecc987ed5d6b6a05527a2a020e4b1b6c3cd34435f9c5db350a877ef8cdec2025e76cd12ed2589a5a028a678fabec39aaeaae9bc7623755cdf6f149a33bc8963c1fedf5b7b7c025003a0cf35078f33a91f1951bb118ab097be93b2d57ee2e03607c33708766780204244a0558e2f95260ac5f1d4c3b9a8345264aa80fe38f1cf2047cce3990107ce489a60a0571fb51cecf70b86150df9f994cd7ce6429fa86c8d5d44f7baee3ac05c11b808a0f569ee29c4d234fc8fbac076531d553ecc7ad1380aa22b0acfe2692aee18e8c1a09d6d53581eeef7601d0c4ffc46e4bd0c4532104836f0937cd57ae73deb624ad6a075089208a54e6c933803a3e24fe8feb1c4878cb8719e6289629698d7f232b9a2a0a656b53fccd2c82a4d45e7cff8adf8dbe7f8f644d53c1c9546130e06727ae56d80f90211a08d0cca0632c15199f41b494ca0134563bb5aa177fdab99c89b755f03ae6537d7a0f68ed566180474f58acf40da551d0fd5f06348e3b7d3ed324bdc84af7857b519a0c66a9553414e145d510331704a955ea7f0680504d7c7f4ab30666bec654cc111a0fff1267ab5a72b29fe951346d947ae0d4632085b2edfca11cbab1a21c5ab4930a0749a388998cdc27175983e64a17833fa83396c0a54fec872221c518b9b632025a02c4a59bef5e72a5dc2e7fa0245365156aa86e4d50a214d2539bc74eef9338923a030e730085ed4096415f24b7ac114a9472fc824525dbbad828db20a248cf1234ea036ec408ba4243e9dfc4f3b6ca332490bff99c546d50dafebf7e9d1f13ede5ceca01b2c3a1ca936144c21f34ba8a9715b00646992142848ae5547fe52fc1f452deaa0dcc4359cb67fa5b06160d5e540b1983c6c65b9e85572b19aabcd1fdcb82c918fa07888809fdbc0385004dee25e1139acb5b3ee40fd5140e859b6987ed6f111ce72a0d2640c90fdcbd8d5510795f00b68a6304de8030ce581f779005755a58f07accea051905ef4f6e53a4c5468c21d6a9189f635d907ea6f4ab291dd0138a509515f99a039731831a89d8f9046af70712bb27e05799c17e025628611f97915e0c4abe764a08eddec740c5cc871f4b7f2564ae2345720b8616d130169f18e7f9cc740715641a02f4c2294571bb364cb2ba764464117ec45d7f617525106558cc9cfd3370aa08c80f90211a064c7ae40306b89af0ab22e8bd99d17d8de663257f1187b2bb930c3a466686f57a0f66469447c4dd0c2a18c3f57a837fb5f41ac3f4633a700ee945cc46359b3c214a048c4c259c878de574cc5f082e8f17229f800fcb1db91cf2c28b7a2a02fa8727ca0fa8ba3955a99f5e15deca181c4cc02ba53ecb6117d69ac8d532893613e4aab49a093dede01d72b40dab4a9a9065bd5215b336554212e06e8acd776e3a901dc12a5a0141d78a79b85fe42e035c9668f9b27f92506b48f2444da96bad4066e76fda968a07038adb71847c4f22f167f4666a6f633333b1566178016df408228b61ca861a8a0eedb9d9667512ba2cf388719a0c28eedaddfdd02d6d9c14cee00c809211c8cbca02f6021090b8668b258b0a8a990d7b84f14fe77f43f26a104c5af2b2557b77060a05c050efa790cb5d5888227c24f23cc931ae40561e743ad182af65bba1f8d75f3a08bf9b905826f36cf71a4b9d1f288b775b3aff9c52191f8960009ecf5dcf53ebda085757b9a2d7bd23439085495d9becd27c90f300d91ac13b18f6d6fdf37424f91a0a89b9445334ac08439d7bcbeda6066345e0e243f4506f4cddaaeda783581f41ca05566cf80361cf2b97d548b7d91bed20e1eb235f74328f3ef9e80a2a349a36a08a069aa7458d656d8f69d568bb056d0b45f440f4f994acfb8e4325823cb77963d35a077b0fab8d72dd616a7e19f92e3965bd61883b7f91737e33601ee52ace4b3d5ba80f90211a0d5120333ddba0566c4103fea22d593159f1683a0fd8470809d6407d20a5b6faaa08c9842ed44368c7ad58dd49a7c7573b66c479854cc0b9c28fa1eedb71e86a241a090be772dfab6474827df23138f0648053c0ddb66d0994dd245318db35d2e0588a04819ce69d8e22fe147d9705b33adc8f98ca76d67d5c1d13c5acf585e3d139d9da02faa1f7f68804fe14a44dcf9f89288d7ecc227b6ab7d28152f4655b9242e5c6fa02077b17adb71d30b33b4711c3c77a54352cd1f0d34dcc0b97712b0cc379f7098a00f8770ca732a5f440e1701a410732f17c015f164fbba9468d3d9bd80bfd595c5a06f49da85add2c6628ff06475b61484fccc1eb08b9025d08662e70799927b786ca09acefe4ef61f7ca9b639ba0ce24909ed487f96fd3afb63dd6eaccf2004ae86dca0a788788b10709d46d5d2afac2bd584b1e3d698d07a8f298044be96b3c5ee7246a04222c9a2876be0e33399c7a04a7972d82e061e3e1aa6947c2bc71210ba1ec477a0b1e0115e7ac5ec7982606bc5557872644469de0779c96826954124d315624ecda08b5a724bef8a1c8a49affa1e9ccc1c710159689d043b14da91ba95cb140ae5d3a03dfcebc58ef32122c33d2ccf2e3a3e4459235cabe4380ed6171f50e879784179a06fb1bdc478dd9a76601295fb7fbd886deb7f9aa0e0daf079c6a95387e1e4da30a0ef70c6e471e521e06cbbc3f1ede659c88a2dccbed6780ec7f16fc5d93196d4d380f90211a0c47c24edafdedc365234022ae14f5815ea05ae3d7082d7c5254c78e9cd424711a035d4789c0492b17da7dd3eb680729af58fcf5747099035e6a2f9396ccad3ecf8a075b6641a829ef8094e712b03da531c1a6869d8853a8b34fce8e4ae12a2e29cd2a061e6dff7cd8ec8b6d7363d48acf14a1fe561e92db23342c728791a468c2c78fda0e27264cb5f088efd1e73b905018248d2dc794a46a73147a5a471946477ad76f7a07ce4ed0a0645d238a90441e1911f621b3982fa1578429d14515569787e1a8980a00df96b31ee4eab45947d6ee6b1af4ac9fea1f028ff61e58e6d343f311a7b7110a0d37037176af45ca1f301709c6069fbc1b94866a25a546ce4951a3a126b38b04ea0f424f5b9bd34b597d3f52813fefd7fd1a6f276a548cbfb19693a9be75eb8074aa088ae3987cdcc932726586d021b644ecf507df4d10f79f0322c8d7c3dbb0e4c51a0b99d186851e4a51354c2d5f6d8b976390b3aed76ed753c457a5d7290e2dacc4aa0f11b01ae6c474c9dac75d8504b4b20e8ce1f571219ef4d09c4d6f7810c93cfe8a0e7e5c4284ae2a4a8e8e413dfc506dd35dd875777966dfac7d23fd224a125a27ea0c2bd2acf7bf33f0a22947da690be38447fd7939522841510b63cd2b60e3bfb3fa0446efb54e47bca7433910d90d127be7a540c6b8d96004a28fe8e75e6f603f0f3a07839d2528bb22b92b7375a8418fb089ff0c718a8f830dadee01e372e4ad2e1cd80f90171a0c7595b3f2c413210b830d79688b5da6ffcdca1f1713ab57c3158b14d97dc0fe4a0ef5806155c01effdd0faa052d999ba7b8617c2cfe1df31ed90ce65625f670c7aa0da515adf030860b1c07bcb2ffcaa35801531b7f4cfe7df5284ef9a5c0ff7c3aea0ff8883cea400c09f66d90ff2192489cac533cab68ae57217854caabfdffa2648a0d5aa000a86789cdd7ac3c398eddde5e7be77f7048c032e615fc9ed693a5f7ea3a0cc398af6da101d760f8582883459d2d88a15a2cdc6fc272b067d3acffdcdff2b80a094bcd7427ccd36f621ca0ce4026061335579e86d3d1337e72a7189ef35b6b4b5a0348310820602896f7b29e34edb3df3291bfc0be4c44e7f844dbcc7ad11ecb132a0d9df2ef0bae2572da609b517aea4a1b7bb83ff946a9e3ea521f7390f89c8ceb380a0cd894bab92a66374c4c0ea4e31415c93ee3e39070b498569fb58bde5c8a83385a09a494c3b8b2647ff7d9254d6cc9576a069e2ccd47006b4287d0f89ffa5ec208880808080f8679e20171808d8a425d236d025548a58bf8b8c954b77afa54db8185181749e4bb846f8440180a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
      state_root, key, proof = Ciri::RLP.decode(Ciri::Utils.dehex raw)
      [state_root, key, proof]
    end

    it 'proof key exists' do
      state_root, key, proof = proof_key_exists
      expect(Ciri::Trie.proof(state_root, key, proof)).not_to eq ''.b
    end

    it 'proof key not exists' do
      state_root, key, proof = proof_key_does_not_exists
      expect(Ciri::Trie.proof(state_root, key, proof)).to eq ''.b
    end

    it 'proof invalid' do
      state_root, key, proof = proof_key_exists
      proof[5][3] = ''.b
      expect {Ciri::Trie.proof(state_root, key, proof)}.to raise_error(Ciri::Trie::BadProofError)
    end

    it 'proof empty' do
      state_root = Ciri::Utils.keccak('state root'.b)
      key = Ciri::Utils.keccak('some key'.b)
      proof = []
      expect {Ciri::Trie.proof(state_root, key, proof)}.to raise_error(Ciri::Trie::BadProofError)
    end

  end
end
